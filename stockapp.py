# -*- coding: utf-8 -*-
"""stockapp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VhxWpef90STpNoh_IDr5y7ej0DqxJ6vQ
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import plotly.graph_objects as go

# Function to calculate RSI
def calculate_rsi(data, window=14):
    delta = data['Close'].diff(1)
    gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# Streamlit app
st.title("Stock Analysis App")

# Input for stock ticker
st.header("Enter Stock Ticker")
ticker = st.text_input("Stock Ticker (e.g., AAPL, MSFT)", value="AAPL")

# Date range selection
st.header("Select Date Range")
start_date = st.date_input("Start Date", value=pd.Timestamp.today() - pd.Timedelta(days=365))
end_date = st.date_input("End Date", value=pd.Timestamp.today())

if st.button("Fetch Data"):
    # Fetch stock data
    try:
        stock_data = yf.download(ticker, start=start_date, end=end_date)
        if stock_data.empty:
            st.error("No data found for the selected ticker and date range.")
        else:
            st.subheader("Stock Data Preview")
            st.write(stock_data.tail())

            # Calculate SMA and RSI
            stock_data['SMA50'] = stock_data['Close'].rolling(window=50).mean()
            stock_data['SMA100'] = stock_data['Close'].rolling(window=100).mean()
            stock_data['RSI'] = calculate_rsi(stock_data)

            # Candlestick chart with SMA lines
            st.subheader("Candlestick Chart with SMA Lines")
            last_30_days = stock_data[-30:]
            fig = go.Figure()
            fig.add_trace(go.Candlestick(x=last_30_days.index,
                                         open=last_30_days['Open'],
                                         high=last_30_days['High'],
                                         low=last_30_days['Low'],
                                         close=last_30_days['Close'],
                                         name='Candlestick'))
            fig.add_trace(go.Scatter(x=last_30_days.index, y=last_30_days['SMA50'],
                                     mode='lines', name='SMA 50', line=dict(color='blue')))
            fig.add_trace(go.Scatter(x=last_30_days.index, y=last_30_days['SMA100'],
                                     mode='lines', name='SMA 100', line=dict(color='orange')))
            fig.update_layout(title=f"Candlestick Chart for {ticker}",
                              xaxis_title="Date",
                              yaxis_title="Price",
                              template="plotly_dark")
            st.plotly_chart(fig)

            # Table for average return and standard deviation of return
            st.subheader("Return Analysis")
            stock_data['Return'] = stock_data['Close'].pct_change()
            last_90_days = stock_data[-90:]
            avg_return = last_90_days['Return'].mean()
            std_dev = last_90_days['Return'].std()
            return_table = pd.DataFrame({"Metric": ["Average Return", "Standard Deviation"],
                                         "Value": [avg_return, std_dev]})
            st.write(return_table)

            # RSI chart
            st.subheader("RSI Chart")
            fig_rsi = go.Figure()
            fig_rsi.add_trace(go.Scatter(x=stock_data.index, y=stock_data['RSI'],
                                          mode='lines', name='RSI', line=dict(color='purple')))
            fig_rsi.update_layout(title=f"RSI for {ticker}",
                                  xaxis_title="Date",
                                  yaxis_title="RSI",
                                  template="plotly_dark")
            st.plotly_chart(fig_rsi)

    except Exception as e:
        st.error(f"Error fetching data: {e}")